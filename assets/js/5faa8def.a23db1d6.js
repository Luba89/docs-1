"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3386],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,b=m["".concat(l,".").concat(d)]||m[d]||p[d]||s;return t?r.createElement(b,i(i({ref:n},c),{},{components:t})):r.createElement(b,i({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<s;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},58215:function(e,n,t){t.d(n,{Z:function(){return a}});var r=t(67294);function a(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return c}});var r=t(87462),a=t(67294),s=t(72389),i=t(17984),o=t(86010),l="tabItem_LplD";function u(e){var n,t,s,u=e.lazy,c=e.block,p=e.defaultValue,m=e.values,d=e.groupId,b=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:f.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,i.lx)(g,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===p?p:null!=(n=null!=p?p:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(s=f[0])?void 0:s.props.value;if(null!==h&&!g.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,i.UB)(),w=y.tabGroupChoices,T=y.setTabGroupChoices,k=(0,a.useState)(h),E=k[0],_=k[1],C=[],O=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var x=w[d];null!=x&&x!==E&&g.some((function(e){return e.value===x}))&&_(x)}var j=function(e){var n=e.currentTarget,t=C.indexOf(n),r=g[t].value;r!==E&&(O(n),_(r),null!=d&&T(d,r))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=C.indexOf(e.currentTarget)+1;t=C[r]||C[0];break;case"ArrowLeft":var a=C.indexOf(e.currentTarget)-1;t=C[a]||C[C.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},b)},g.map((function(e){var n=e.value,t=e.label,s=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:E===n?0:-1,"aria-selected":E===n,key:n,ref:function(e){return C.push(e)},onKeyDown:S,onFocus:j,onClick:j},s,{className:(0,o.Z)("tabs__item",l,null==s?void 0:s.className,{"tabs__item--active":E===n})}),null!=t?t:n)}))),u?(0,a.cloneElement)(f.filter((function(e){return e.props.value===E}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==E})}))))}function c(e){var n=(0,s.Z)();return a.createElement(u,(0,r.Z)({key:String(n)},e))}},74202:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return d}});var r=t(87462),a=t(63366),s=(t(67294),t(3905)),i=t(9877),o=t(58215),l=["components"],u={sidebar_position:2,title:"Pub-Sub with Streams"},c=void 0,p={unversionedId:"streams/tutorials/pub-sub-streams",id:"streams/tutorials/pub-sub-streams",title:"Pub-Sub with Streams",description:"This is about how to create geo-replicated streams and do queues & pub-sub messaging with local latencies across the globe.",source:"@site/docs/streams/tutorials/pub-sub-streams.md",sourceDirName:"streams/tutorials",slug:"/streams/tutorials/pub-sub-streams",permalink:"/docs/streams/tutorials/pub-sub-streams",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Pub-Sub with Streams"},sidebar:"tutorialSidebar",previous:{title:"Using Rest APIs",permalink:"/docs/streams/tutorials/using_rest_api"},next:{title:"Realtime Updates",permalink:"/docs/streams/tutorials/using-realtime-updates"}},m={},d=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"Installation",id:"installation",level:2},{value:"Code Sample",id:"code-sample",level:2}],b={toc:d};function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This is about how to create geo-replicated streams and do queues & pub-sub messaging with local latencies across the globe."),(0,s.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,s.kt)("p",null,"Let's assume your"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Tenant name is ",(0,s.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,s.kt)("li",{parentName:"ul"},"User password is ",(0,s.kt)("inlineCode",{parentName:"li"},"xxxxxxxx"),".")),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"With Yarn or NPM\n\n    yarn add jsc8\n    (or)\n    npm install jsc8\n\nIf you want to use the driver outside of the current directory, you can also install it globally using the `--global` flag:\n\n    npm install --global jsc8\n\nFrom source,\n\n    git clone https://github.com/macrometacorp/jsc8.git\n    cd jsC8\n    npm install\n    npm run dist\n"))),(0,s.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\nTo install pyC8, simply run\n\n    $ pip3 install pyC8\n\nor, if you prefer to use conda:\n\n    conda install -c conda-forge pyC8\n\nor pipenv:\n\n    pipenv install --pre pyC8\n\nOnce the installation process is finished, you can begin developing applications in Python.\n")))),(0,s.kt)("h2",{id:"code-sample"},"Code Sample"),(0,s.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require(\'jsc8\');\n\nconst gdnUrl = "https://gdn.paas.macrometa.io";\n\n// Crete a authenticated instance with Token / Apikey\n// const client = new jsc8({url: gdnUrl, token: "XXXX", fabricName: \'_system\'});\n// const client = new jsc8({url: gdnUrl, apiKey: "XXXX", fabricName: \'_system\'});\n// await console.log("Authentication done!!...");\n\n// Or use Email & Password to Authenticate client instance\nconst client = new jsc8(gdnUrl);\n\nawait client.login("nemo@nautilus.com", "xxxxxx");\n\n//Variables\nconst msgs = ["message 1", "message 2", "message 3"];\nlet numberOfMessages = 0;\n\nasync function getDCList() {\n  let dcListAll = await client.listUserFabrics();\n  let dcListObject = await dcListAll.find(function(o) { return o.name === geo_fabric; });\n  return dcListObject.options.dcList.split(",");\n}\n\n\nasync function publish(stream) {\n  console.log("\\n ------- PUBLISH MESSAGES  ------");\n  const publisher = await client.createStreamProducer("testStream");\n}\n\nasync function receive(stream) {\n  const consumer = await client.createStreamReader("testStream", "my-subscription");\n  consumer.on("message", (msg) => {\n    console.log(msg);\n  });\n}\n\n(async function() {\n  const dcList = await getDCList();\n  await console.log("dcList: ", dcList);\n\n  await client.createStream("testStream", false);\n  //Here the last boolean value tells if the stream is local or global. false means that it is global.\n\n\n  // publishing streams\n  await receive();\n\n  await publish();\n\n})();\n'))),(0,s.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'from c8 import C8Client\nimport random\nimport threading\nimport time\nimport json\nimport base64\nimport six\n\n# Variables\nglobal_url = "gdn.paas.macrometa.io" # The request will be automatically routed to closest location.\nemail = "guest1@macrometa.io"\npassword = "guest1"\ngeo_fabric = "testfabric"\nstream_name = "stream"+ str(random.randint(1, 10000))\n\ndef create_subscriber():\n    print("\\n ------- SUBSCRIBE TOPIC  ------")\n\n    print("Subscribe to stream: {}".format(stream_name))\n    subscriber1 = client.subscribe(stream=stream_name, local=True, subscription_name="subscriber1",\n    consumer_type=client.CONSUMER_TYPES.EXCLUSIVE)\n\n    #receive: read the published messages over stream.\n    for i in range(10):\n        response = json.loads(subscriber1.recv())\n        msg = base64.b64decode(response["payload"])\n        print("Received Message:", msg)\n        if response["messageId"]:\n            # print("Acknowledging msg: ", response["messageId"])\n            subscriber1.send(json.dumps(\n                {"payload": base64.b64encode(six.b(\n                    response["messageId"])).decode("utf-8")}))\n\nif __name__ == \'__main__\':\n\n    print("\\n ------- CONNECTION SETUP  ------")\n    print("user: {}, geofabric:{}".format(email, geo_fabric))\n    print("\\n1. CONNECT: federation: {},  user: {}".format(global_url, email))\n    client = C8Client(protocol=\'https\', host=global_url, port=443,\n                    email=email, password=password,\n                    geofabric=geo_fabric)    \n\n    print("\\n ------- CREATE STREAM  (local/geo-replicated) ------")\n    client.create_stream(stream_name, local=True)  # set local=False for geo-replicated stream available in all regions.\n    print("Created stream: {}".format(stream_name))\n    time.sleep(10)  # to account for network latencies in replication\n\n    print("\\n ------- CREATE SUBSCRIBER  ------")\n    subscriber_thread = threading.Thread(target=create_subscriber)\n    subscriber_thread.start()\n\n    print("\\n ------- CREATE PRODUCER  ------")\n    print("Create producer on stream: {}".format(stream_name))\n    producer = client.create_stream_producer(stream_name, local=True)\n    print(producer.__dict__)\n    print("\\n ------- PUBLISH MESSAGES  ------")\n    print("Publish 10 messages to stream: {}".format(stream_name))\n    for i in range(10):\n        print(i)\n        msg = "Hello from  user--" + "(" + str(i) + ")"\n        data = {\n                "payload": base64.b64encode(six.b(msg)).decode("utf-8"),\n        }\n        try:\n            producer.send(json.dumps(data))\n            response =  json.loads(producer.recv())\n            if response[\'result\'] == \'ok\':\n              print(\'Message published successfully\')\n            else:\n              print(\'Failed to publish message:\', response)\n        except Exception as e:\n            m = "Producer failed to send message due to Pulsar Error - %s" % e\n            print(m)\n\n    producer.close()\n    print("Publish messages done...")\n\n    print("Wait for subscriber to consume all messages...")\n    subscriber_thread.join()  # Wait for subscriber to consume all messages.\n    print("\\n ------- DONE  ------")\n')))))}f.isMDXComponent=!0}}]);