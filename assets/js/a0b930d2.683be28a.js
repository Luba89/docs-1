"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1706],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return g}});var n=a(67294);function p(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){p(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,p=function(e,t){if(null==e)return{};var a,n,p={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(p[a]=e[a]);return p}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(p[a]=e[a])}return p}var i=n.createContext({}),s=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,p=e.mdxType,l=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(a),g=p,d=u["".concat(i,".").concat(g)]||u[g]||c[g]||l;return a?n.createElement(d,r(r({ref:t},m),{},{components:a})):n.createElement(d,r({ref:t},m))}));function g(e,t){var a=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var l=a.length,r=new Array(l);r[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:p,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},58215:function(e,t,a){a.d(t,{Z:function(){return p}});var n=a(67294);function p(e){var t=e.children,a=e.hidden,p=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:p},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return m}});var n=a(87462),p=a(67294),l=a(72389),r=a(17984),o=a(86010),i="tabItem_LplD";function s(e){var t,a,l,s=e.lazy,m=e.block,c=e.defaultValue,u=e.values,g=e.groupId,d=e.className,h=p.Children.map(e.children,(function(e){if((0,p.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),S=null!=u?u:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,r.lx)(S,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===c?c:null!=(t=null!=c?c:null==(a=h.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=h[0])?void 0:l.props.value;if(null!==b&&!S.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+S.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,r.UB)(),A=T.tabGroupChoices,C=T.setTabGroupChoices,f=(0,p.useState)(b),v=f[0],w=f[1],k=[],D=(0,r.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var N=A[g];null!=N&&N!==v&&S.some((function(e){return e.value===N}))&&w(N)}var I=function(e){var t=e.currentTarget,a=k.indexOf(t),n=S[a].value;n!==v&&(D(t),w(n),null!=g&&C(g,n))},E=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=k.indexOf(e.currentTarget)+1;a=k[n]||k[0];break;case"ArrowLeft":var p=k.indexOf(e.currentTarget)-1;a=k[p]||k[k.length-1]}null==(t=a)||t.focus()};return p.createElement("div",{className:"tabs-container"},p.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},d)},S.map((function(e){var t=e.value,a=e.label,l=e.attributes;return p.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:function(e){return k.push(e)},onKeyDown:E,onFocus:I,onClick:I},l,{className:(0,o.Z)("tabs__item",i,null==l?void 0:l.className,{"tabs__item--active":v===t})}),null!=a?a:t)}))),s?(0,p.cloneElement)(h.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):p.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,p.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}function m(e){var t=(0,l.Z)();return p.createElement(s,(0,n.Z)({key:String(t)},e))}},12936:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return m},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return g}});var n=a(87462),p=a(63366),l=(a(67294),a(3905)),r=a(9877),o=a(58215),i=["components"],s={sidebar_position:1,title:"Quickstart"},m="Quickstart with Stream Processing",c={unversionedId:"cep/quickstart",id:"cep/quickstart",title:"Quickstart",description:"Macrometa GDN allows you to integrate streaming data and take appropriate actions. Most stream processing use cases involve collecting, analyzing, and integrating or acting on data generated during business activities by various sources.",source:"@site/docs/cep/quickstart.md",sourceDirName:"cep",slug:"/cep/quickstart",permalink:"/docs/cep/quickstart",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Quickstart"},sidebar:"tutorialSidebar",previous:{title:"Integrating Plugins",permalink:"/docs/streams/tutorials/integrating-plugins"},next:{title:"Using Rest API",permalink:"/docs/cep/tutorials/using_rest_api"}},u={},g=[{value:"Driver Download",id:"driver-download",level:2},{value:"Connect to GDN",id:"connect-to-gdn",level:2},{value:"Validate Stream Application",id:"validate-stream-application",level:2},{value:"Save Stream Application",id:"save-stream-application",level:2},{value:"Enable or Disable Stream Application",id:"enable-or-disable-stream-application",level:2},{value:"Example: Update Stream Application",id:"example-update-stream-application",level:2},{value:"Run an Adhoc Query",id:"run-an-adhoc-query",level:2},{value:"Delete Stream Application",id:"delete-stream-application",level:2},{value:"Get Sample Stream Applications",id:"get-sample-stream-applications",level:2},{value:"Complete Example",id:"complete-example",level:2}],d={toc:g};function h(e){var t=e.components,s=(0,p.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"quickstart-with-stream-processing"},"Quickstart with Stream Processing"),(0,l.kt)("p",null,"Macrometa GDN allows you to integrate streaming data and take appropriate actions. Most stream processing use cases involve collecting, analyzing, and integrating or acting on data generated during business activities by various sources."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Stage"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Collect")),(0,l.kt)("td",{parentName:"tr",align:null},"Receive or capture data from various data sources.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Analyze")),(0,l.kt)("td",{parentName:"tr",align:null},"Analyze data to identify interesting patterns and extract information.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Act")),(0,l.kt)("td",{parentName:"tr",align:null},"Take actions based on the findings. For example, running simple code, calling an external service, or triggering a complex integration.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"Integrate")),(0,l.kt)("td",{parentName:"tr",align:null},"Provide processed data for consumer consumption.")))),(0,l.kt)("p",null,"If you are new to Macrometa GDN, start by reading the ",(0,l.kt)("a",{parentName:"p",href:"/docs/essentials/overview"},"essentials")," of Macrometa GDN."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"GDN Essentials",src:a(11226).Z,width:"2708",height:"1418"})),(0,l.kt)("p",null,"You can process streams to perform the following actions with your data:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Transform data from one format to another. For example, from XML to JSON."),(0,l.kt)("li",{parentName:"ul"},"Enrich data received from a specific source by combining it with databases and services."),(0,l.kt)("li",{parentName:"ul"},"Correlate data by joining multiple streams to create an aggregate stream."),(0,l.kt)("li",{parentName:"ul"},"Clean data by filtering it and by modifying the content in messages. For example, obfuscating sensitive information."),(0,l.kt)("li",{parentName:"ul"},"Derive insights by identifying event patterns in data streams."),(0,l.kt)("li",{parentName:"ul"},"Summarize data with time windows and incremental aggregations."),(0,l.kt)("li",{parentName:"ul"},"Real-time ETL for collections, tailing files, and scraping HTTP endpoints."),(0,l.kt)("li",{parentName:"ul"},"Integrating stream data and trigger actions based on the data. This can be a single service request or a complex enterprise integration flow.")),(0,l.kt)("p",null,"For the following examples, assume these credentials:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tenant name: ",(0,l.kt)("a",{parentName:"li",href:"mailto:nemo@nautilus.com"},"nemo@nautilus.com")),(0,l.kt)("li",{parentName:"ul"},"Password: xxxxxx")),(0,l.kt)("h2",{id:"driver-download"},"Driver Download"),(0,l.kt)("p",null,"Download the appropriate drivers for your preferred language."),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"    With Yarn or NPM\n\n        yarn add jsc8\n        (or)\n        npm install jsc8\n\n    If you want to use the driver outside of the current directory, you can also install it globally using the `--global` flag:\n\n        npm install --global jsc8\n\n    From source,\n\n        git clone https://github.com/macrometacorp/jsc8.git\n        cd jsC8\n        npm install\n        npm run dist\n"))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"    pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n    To install pyC8, simply run\n\n        $ pip3 install pyC8\n\n    or, if you prefer to use conda:\n\n        conda install -c conda-forge pyC8\n\n    or pipenv:\n\n        pipenv install --pre pyC8\n\n    Once the installation process is finished, you can begin developing applications in Python.\n")))),(0,l.kt)("h2",{id:"connect-to-gdn"},"Connect to GDN"),(0,l.kt)("p",null,"Establish a connection to a local region. When this code runs, it initializes the server connection to the region URL you specified."),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"    from c8 import C8Client\n\n    print(\"--- Connecting to C8\")\n    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                            email='nemo@nautilus.com', password='xxxxx',\n                            geofabric='_system')\n"))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n\n    // Simple Way\n    const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // ----- OR -----\n    const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n\n    // To use advanced options\n    const client = new jsc8("https://gdn.paas.macrometa.io"); \n')))),(0,l.kt)("h2",{id:"validate-stream-application"},"Validate Stream Application"),(0,l.kt)("p",null,"Validate the stream application for syntax errors before saving."),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'    stream_app_definition = """\n    @App:name(\'Sample-Cargo-App\')\n    @App:qlVersion("2")\n    @App:description(\'Basic Stream application to demonstrate reading data from input stream and store it in the collection. The stream and collections will be created automatically if they do not already exist.\')\n\n    /**\n    Testing the Stream Application:\n        1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n\n        2. Upload following data into SampleCargoAppInputTable C8DB Collection\n            {"weight": 1}\n            {"weight": 2}\n            {"weight": 3}\n            {"weight": 4}\n            {"weight": 5}\n\n        3. Following messages would be shown on the SampleCargoAppDestStream Stream Console\n            [1]\n            [2]\n            [3]\n            [4]\n            [5]\n        */\n\n        -- Create Table SampleCargoAppInputTable to process events having sensorId and temperature(F).\n    CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\') (weight int);\n\n\n        -- Create Stream SampleCargoAppDestStream\n    CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n\n\n    -- Data Processing\n    @info(name=\'Query\')\n    INSERT INTO SampleCargoAppDestStream\n    SELECT weight\n    FROM SampleCargoAppInputTable;\n    """\n\n    print("--- Validating Stream Application Definition")\n    print(client.validate_stream_app(data=stream_app_definition))\n'))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'    // Add this snippet in previously created main function\n    const appDefinition = `\n        @App:name(\'Sample-Cargo-App\')\n        @App:qlVersion("2")\n        @App:description(\'Basic Stream application to demonstrate reading data from input stream and store it in the collection. The stream and collections will be created automatically if they do not already exist.\')\n\n        /**\n         Testing the Stream Application:\n            1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n\n            2. Upload following data into SampleCargoAppInputTable C8DB Collection\n                {"weight": 1}\n                {"weight": 2}\n                {"weight": 3}\n                {"weight": 4}\n                {"weight": 5}\n\n            3. Following messages would be shown on the SampleCargoAppDestStream Stream Console\n                [1]\n                [2]\n                [3]\n                [4]\n                [5]\n        */\n\n        -- Create Table SampleCargoAppInputTable to process events having sensorId and temperature(F).\n        CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", @map(type=\'json\')) (weight int);\n\n\n        -- Create Stream SampleCargoAppDestStream\n        CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n\n\n        -- Data Processing\n        @info(name=\'Query\')\n        INSERT INTO SampleCargoAppDestStream \n        SELECT weight\n        FROM SampleCargoAppInputTable;`\n\n    console.log("--- Validating Stream Application Definition");\n    result = await client.validateStreamApp(appDefinition);\n')))),(0,l.kt)("h2",{id:"save-stream-application"},"Save Stream Application"),(0,l.kt)("p",null,"By default, the stream application saves in the local region. Optionally, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"dclist")," (domain component list) to deploy the stream application in other specified regions or all regions."),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'    print("--- Creating Stream Application")\n    print(client.create_stream_app(data=stream_app_definition))\n'))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'    // The stream app will be created by default in the local region. Optionally, you can send dclist to deploy stream\n    // app in all / selected regions\n    console.log("--- Creating Stream Application");\n    result = await client.createStreamApp([], appDefinition);\n')))),(0,l.kt)("h2",{id:"enable-or-disable-stream-application"},"Enable or Disable Stream Application"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"    print(\"Activate\", client.activate_stream_app('Sample-Cargo-App', True))\n\n    print(\"Deactivate\", client.activate_stream_app('Sample-Cargo-App', False))\n"))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'    console.log("--- Activating `Sample-Cargo-App`");\n    const result = await client.activateStreamApp("Sample-Cargo-App", true);\n\n    console.log("--- Deactivating `Sample-Cargo-App`");\n    const result = await client.activateStreamApp("Sample-Cargo-App", false);\n')))),(0,l.kt)("p",null,"To operate on created applications, you need to create an instance of the stream application."),(0,l.kt)("h2",{id:"example-update-stream-application"},"Example: Update Stream Application"),(0,l.kt)("p",null,"In this example, we update a stream application to store the input data into itself and another collection called ",(0,l.kt)("inlineCode",{parentName:"p"},"SampleCargoAppDestTable"),". "),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"    from c8 import C8Client\n\n    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443, email='nemo@nautilus.com', password='xxxxx', geofabric='_system')\n\n    # To operate on created apps, you need to create an instance of the app\n    app = client.stream_app(\"Sample-Cargo-App\")\n\n    # Update the app using\n    data = \"\"\"@App:name('Sample-Cargo-App') @App:qlVersion('2')\n\n        -- Stream\n    CREATE SOURCE STREAM srcCargoStream (weight int);\n\n        -- Table\n    CREATE TABLE destCargoTable (weight int, totalWeight long);\n\n        -- Data Processing\n    @info(name='Query')\n    INSERT INTO destCargoTable\n    SELECT weight, sum(weight) as totalWeight\n    FROM srcCargoStream;\"\"\"\n    regions = []\n    result = fabric.update(data,regions)\n    print(result)\n"))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"    CREATE STORE SampleCargoAppDestTable WITH (type = 'database', stream = \"SampleCargoAppDestTable\") (weight int);\n\n\n    Also add an query to store all the input data into `SampleCargoAppDestTable`.\n\n    -- Data Processing\n    @info(name='Dump')\n    INSERT INTO SampleCargoAppDestTable\n    SELECT weight\n    FROM SampleCargoAppInputTable;\n")))),(0,l.kt)("p",null,"Now, the code to update an Stream Application will look like"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'    const updatedAppDefinition = `\n    @App:name(\'Sample-Cargo-App\')\n    @App:qlVersion("2")\n    @App:description(\'Basic stream application to demonstrate reading data from input stream and store it in the collection. The stream and collections will be created automatically if they do not already exist.\')\n\n    /**\n    Testing the Stream Application:\n    1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n\n    2. Upload following data into SampleCargoAppInputTable C8DB Collection\n        {"weight": 1}\n        {"weight": 2}\n        {"weight": 3}\n        {"weight": 4}\n        {"weight": 5}\n\n    3. Following messages would be shown on the SampleCargoAppDestStream Stream Console\n        [1]\n        [2]\n        [3]\n        [4]\n        [5]\n\n    4. Following messages would be stored into SampleCargoAppDestTable\n        {"weight":1}\n        {"weight":2}\n        {"weight":3}\n        {"weight":4}\n        {"weight":5}\n    */\n\n    -- Defines Table SampleCargoAppInputTable to process events having sensorId and temperature(F).\n    CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\') (weight int);\n\n    -- Define Stream SampleCargoAppDestStream\n    CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n\n    CREATE STORE SampleCargoAppDestTable WITH (type = \'database\', stream = "SampleCargoAppDestTable") (weight int);\n\n    -- Data Processing\n    @info(name=\'Query\')\n    INSERT INTO SampleCargoAppDestStream\n    SELECT weight\n    FROM SampleCargoAppInputTable;\n\n    -- Data Processing\n    @info(name=\'Dump\')\n    INSERT INTO SampleCargoAppDestTable\n    SELECT weight\n    FROM SampleCargoAppInputTable;`\n\n    console.log("--- Updating Stream Application `Sample-Cargo-App`");\n    result = await app.updateApplication([], updatedAppDefinition);\n')),(0,l.kt)("h2",{id:"run-an-adhoc-query"},"Run an Adhoc Query"),(0,l.kt)("p",null,"Available in the advanced operations of python driver.\nRefer example at the end of the page."),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"    client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443, email='nemo@nautilus.com', password='xxxxx', geo_fabric='_system')\n\n    # To operate on created apps, you need to create an instance of the app\n    app = client.create_stream_app(\"Sample-Cargo-App\")\n\n    # fire query on app using\n    q = \"select * from SampleCargoAppDestTable limit 3\"\n    result = app.query(q)\n    print(result)\n"))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'    console.log("--- Running adhoc query on the store `SampleCargoAppDestTable` used in Stream Application. It should get all records which you inserted into `SampleCargoAppInputTable`");\n    await app.activateStreamApplication(true);\n    const q = "select * from SampleCargoAppDestTable limit 3";\n    result = await app.query(q);\n    console.log(result);\n')))),(0,l.kt)("h2",{id:"delete-stream-application"},"Delete Stream Application"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"    print(\"--- Deleting Stream Application `Sample-Cargo-App`\")\n    result = client.delete_stream_app('Sample-Cargo-App')\n"))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"    console.log(\"--- Deleting Stream Application `Sample-Cargo-App`\");\n    result = await client.deleteStreamApp()'Sample-Cargo-App';\n")))),(0,l.kt)("h2",{id:"get-sample-stream-applications"},"Get Sample Stream Applications"),(0,l.kt)("p",null,"You can try out several Stream Apps which are preloaded and ready to run."),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'    print("--- You can try out several stream applications which are pre-loaded and ready to run.")\n    print("Samples", client.get_stream_app_samples())\n'))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"    console.log(\"--- You can try out several Stream Apps which are pre-loaded and ready to run.\");\n    result = await client.getStreamAppSamples();\n    console.log('Sample Stream Applications');\n    console.log(result);\n")))),(0,l.kt)("h2",{id:"complete-example"},"Complete Example"),(0,l.kt)("p",null,"The following example uses the code snippets provided in this tutorial."),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'    import time\n    import traceback\n    from c8 import C8Client\n\n    # Simple Approach\n    print("--- Connecting to C8")\n    client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n                            email=\'nemo@nautilus.com\', password=\'xxxxx\',\n                            geofabric=\'_system\')\n\n    stream_app_definition = """\n        @App:name(\'Sample-Cargo-App\')\n        @App:qlVersion("2")\n        @App:description(\'Basic stream application to demonstrate reading data from input stream and store it in the collection. The stream and collections will be created automatically if they do not already exist.\')\n\n        /**\n        Testing the Stream Application:\n            1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n\n            2. Upload following data into SampleCargoAppInputTable C8DB Collection\n                {"weight": 1}\n                {"weight": 2}\n                {"weight": 3}\n                {"weight": 4}\n                {"weight": 5}\n\n            3. Following messages would be shown on the SampleCargoAppDestStream Stream Console\n                [1]\n                [2]\n                [3]\n                [4]\n                [5]\n        */\n\n        -- Create Table SampleCargoAppInputTable to process events having sensorId and temperature(F).\n        CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\') (weight int);\n\n        -- Create Stream SampleCargoAppDestStream\n        CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n\n        -- Data Processing\n        @info(name=\'Query\')\n        INSERT INTO SampleCargoAppDestStream\n        SELECT weight\n        FROM SampleCargoAppInputTable;\n        """\n    # Create a stream application\n    print(client.create_stream_app(data=stream_app_definition))\n    # Validate a stream application\n    print(client.validate_stream_app(data=stream_app_definition))\n    # Retrive a stream application\n    print("Retrive", client.retrieve_stream_app())\n    # Get a stream application handle for advanced operations\n    print("Get App", client.get_stream_app(\'Sample-Cargo-App\'))\n    # Deactivate a stream application\n    print("Deactivate", client.activate_stream_app(\'Sample-Cargo-App\', False))\n    # Activate a stream application\n    print("Activate", client.activate_stream_app(\'Sample-Cargo-App\', True))\n    # Delete a stream application\n    print(client.delete_stream_app(\'Sample-Cargo-App\'))\n    # Get stream application samples\n    print("Samples", client.get_stream_app_samples())\n'))),(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'    const jsc8 = require("jsc8");\n    console.log("--- Connecting to C8");\n\n    // Create an authenticated instance with Token / Apikey\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n    // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n    // await console.log("Authentication done!!...");\n\n    // Or use Email & Password to Authenticate client instance\n    const client = new jsc8("https://gdn.paas.macrometa.io");\n\n    await client.login("nemo@nautilus.com", "xxxxxx");\n\n    async function main() {\n        try {\n            console.log("--- Get geo fabric details");\n            let result = await client.get();\n\n            const appDefinition =\n            `@App:name(\'Sample-Cargo-App\')\n            @App:qlVersion("2")\n            @App:description(\'Basic Stream application to demonstrate reading data from input stream and store it in the collection. The stream and collections will be created automatically if they do not already exist.\')\n\n            /**\n             Testing the Stream Application:\n                1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n\n                2. Upload following data into SampleCargoAppInputTable C8DB Collection\n                    {"weight": 1}\n                    {"weight": 2}\n                    {"weight": 3}\n                    {"weight": 4}\n                    {"weight": 5}\n\n                3. Following messages would be shown on the SampleCargoAppDestStream Stream Console\n                    [1]\n                    [2]\n                    [3]\n                    [4]\n                    [5]\n            */\n\n            -- Defines Table SampleCargoAppInputTable to process events having sensorId and temperature(F).\n            CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\') (weight int);\n\n            -- Define Stream SampleCargoAppDestStream\n            CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n\n            -- Data Processing\n            @info(name=\'Query\')\n            INSERT INTO SampleCargoAppDestStream \n            SELECT weight\n            FROM SampleCargoAppInputTable;`\n\n            console.log("--- Validating Stream Application Definition");\n            result = await client.validateStreamApp(appDefinition);\n\n            // By default, the stream application is created in the local region. Optionally, you can send dclist to deploy stream\n            // app in all / selected regions\n            console.log("--- Creating Stream Application");\n            result = await client.createStreamApp([], appDefinition);\n\n            console.log("--- Getting Stream Application instance `Sample-Cargo-App`");\n            ressult = await client.getStreamApp("Sample-Cargo-App");\n\n            console.log("--- Enable Stream Application `Sample-Cargo-App`");\n            // Enable / Disable app using change_state function\n            // pass true to enable and false to disable the app\n            result = await client.activateStreamApp("Sample-Cargo-App", true);\n\n            const updatedAppDefinition = `\n            @App:name(\'Sample-Cargo-App\')\n            @App:qlVersion("2")\n            @App:description(\'Basic stream application to demonstrate reading data from input stream and store it in the collection. The stream and collections will be created automatically if they do not already exist.\')\n      \n            /**\n            Testing the Stream Application:\n                1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n      \n                2. Upload following data into SampleCargoAppInputTable C8DB Collection\n                    {"weight": 1}\n                    {"weight": 2}\n                    {"weight": 3}\n                    {"weight": 4}\n                    {"weight": 5}\n      \n                3. Following messages would be shown on the SampleCargoAppDestStream Stream Console\n                    [1]\n                    [2]\n                    [3]\n                    [4]\n                    [5]\n      \n                4. Following messages would be stored into SampleCargoAppDestTable\n                    {"weight":1}\n                    {"weight":2}\n                    {"weight":3}\n                    {"weight":4}\n                    {"weight":5}\n            */\n      \n            -- Create Table SampleCargoAppInputTable to process events having sensorId and temperature(F).\n            CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\')\n      \n            -- Create Stream SampleCargoAppDestStream\n            CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n      \n            CREATE STORE SampleCargoAppDestTable WITH (type = \'database\', stream = "SampleCargoAppDestTable") (weight int);\n      \n            -- Data Processing\n            @info(name=\'Query\')\n            INSERT INTO SampleCargoAppDestStream\n            SELECT weight\n            FROM SampleCargoAppInputTable;\n      \n            -- Data Processing\n            @info(name=\'Dump\')\n            INSERT INTO SampleCargoAppDestTable\n            SELECT weight\n            FROM SampleCargoAppInputTable;\n      \n            const app = client.streamApp("Sample-Cargo-App");\n            ressult = await app.retriveApplication();\n\n            console.log("--- Updating Stream Application `Sample-Cargo-App`");\n            result = await app.updateApplication([], updatedAppDefinition);\n\n            console.log("--- Running adhoc query on the store `SampleCargoAppDestTable` used in Stream Application. It should get all records which you inserted into `SampleCargoAppInputTable`");\n            const q = "select * from SampleCargoAppDestTable limit 3";\n            result = await app.query(q);\n            console.log(result);\n\n            console.log("--- Deleting Stream Application `Sample-Cargo-App`");\n            result = await app.deleteApplication();\n\n            console.log("--- You can try out several Stream Apps which are pre-loaded and ready to run.");\n            result = await client.getStreamAppSamples();\n            console.log(\'Sample Stream Applications\');\n            console.log(result);\n            \n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    main();\n')))))}h.isMDXComponent=!0},11226:function(e,t,a){t.Z=a.p+"assets/images/gdn-cep-overview-9157634df1fc82f80343aee92f116f09.png"}}]);